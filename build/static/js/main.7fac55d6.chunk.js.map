{"version":3,"sources":["img/icons.svg","Icon.js","App.js","index.js"],"names":["module","exports","Icon","props","name","className","href","Icons","App","useState","weatherData","setWeatherData","useEffect","a","async","fetch","response","json","data","console","log","getWeather","getShortMonthName","Intl","DateTimeFormat","month","format","Date","getDate","Math","round","currently","temperature","summary","timezone","split","map","eachString","join","title","windSpeed","humidity","cloudCover","ReactDOM","render","document","getElementById"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,mC,kMCY5BC,EATF,SAACC,GAAW,IACfC,EAASD,EAATC,KACR,OACE,yBAAKC,UAAS,eAAUD,IACtB,yBAAKE,KAAI,UAAKC,IAAL,iBAAmBH,O,MCgGnBI,MAjGf,WAAgB,IAAD,EACyBC,mBAAS,CAC7C,SAAY,QACZ,WAAc,QACd,SAAY,mBACZ,UAAa,CACX,KAAQ,WACR,QAAW,UACX,KAAQ,OACR,qBAAwB,EACxB,gBAAmB,MACnB,qBAAwB,MACxB,kBAAqB,GACrB,WAAc,OACd,YAAe,KACf,oBAAuB,MACvB,SAAY,MACZ,SAAY,IACZ,SAAY,QACZ,UAAa,KACb,SAAY,MACZ,YAAe,IACf,WAAc,GACd,QAAW,EACX,WAAc,KACd,MAAS,UAzBA,mBACNC,EADM,KACOC,EADP,KA4CbC,qBAAU,YAbS,qBAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAGQE,MAAM,iBAHd,cAGTC,EAHS,kBAAAH,EAAA,MAIIG,EAASC,QAJb,OAITC,EAJS,OAKfC,QAAQC,IAAIF,SAAaA,GACzBP,EAAeO,GANA,kDASfC,QAAQC,IAAI,gCATG,yDAcjBC,KACC,IAKH,IAMMC,EAAoB,IAAIC,KAAKC,eAAe,QAAS,CAAEC,MAAO,UAAWC,OAE/E,OACE,yBAAKrB,UAAU,aACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,QAAQiB,EAAkB,IAAIK,MAA7C,KAAuD,IAAIA,MAAOC,WAClE,yBAAKvB,UAAU,0BACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAMD,KAAK,YACX,kBAAC,EAAD,CAAMA,KAAK,cAIf,yBAAKC,UAAU,QACb,yBAAKA,UAAU,eAAewB,KAAKC,MAAMpB,EAAYqB,UAAUC,aAA/D,QACA,yBAAK3B,UAAU,WACb,yBAAKA,UAAU,iBAAiBK,EAAYqB,UAAUE,SACtD,yBAAK5B,UAAU,kBAAiCK,EAAYwB,SAtB/BC,MAAM,KACFC,KAAI,SAACC,GAAD,OAAgBA,EAAWF,MAAM,KAAKG,KAAK,QAC/DA,KAAK,UAyB5B,yBAAKjC,UAAU,oBACb,yBAAKkC,MAAM,aAAalC,UAAU,0BAChC,kBAAC,EAAD,CAAMD,KAAK,eACX,0BAAMC,UAAU,+BAA+BwB,KAAKC,MAAMpB,EAAYqB,UAAUS,WAAhF,QAEF,yBAAKD,MAAM,WAAWlC,UAAU,0BAC9B,kBAAC,EAAD,CAAMD,KAAK,aACX,0BAAMC,UAAU,+BAA+BwB,KAAKC,MAAuC,IAAjCpB,EAAYqB,UAAUU,UAAhF,MAEF,yBAAKF,MAAM,SAASlC,UAAU,0BAC5B,kBAAC,EAAD,CAAMD,KAAK,WACX,0BAAMC,UAAU,+BAA+BwB,KAAKC,MAAyC,IAAnCpB,EAAYqB,UAAUW,YAAhF,SC3FVC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7fac55d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons.66db9d67.svg\";","import React from 'react';\nimport Icons from './img/icons.svg';\n\nconst Icon = (props) => {\n  const { name } = props;\n  return (\n    <svg className={`icon-${name}`}>\n      <use href={`${Icons}#icon-${name}`}/>\n    </svg>\n  );\n};\n\nexport default Icon;","import React, { useState, useEffect } from 'react';\n\nimport Icon from './Icon';\n\nimport './App.css';\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState({\n    \"latitude\": 42.3601,\n    \"longitude\": -71.0589,\n    \"timezone\": \"America/New_York\",\n    \"currently\": {\n      \"time\": 1509993277,\n      \"summary\": \"Drizzle\",\n      \"icon\": \"rain\",\n      \"nearestStormDistance\": 0,\n      \"precipIntensity\": 0.0089,\n      \"precipIntensityError\": 0.0046,\n      \"precipProbability\": 0.9,\n      \"precipType\": \"rain\",\n      \"temperature\": 66.1,\n      \"apparentTemperature\": 66.31,\n      \"dewPoint\": 60.77,\n      \"humidity\": 0.83,\n      \"pressure\": 1010.34,\n      \"windSpeed\": 5.59,\n      \"windGust\": 12.03,\n      \"windBearing\": 246,\n      \"cloudCover\": 0.7,\n      \"uvIndex\": 1,\n      \"visibility\": 9.84,\n      \"ozone\": 267.44\n    }\n  });\n\n  /* -- Fetching the weather data  -- */\n\n  const getWeather = async () => {\n    try {\n      // let url = `https://localhost:3001/api/weather/${location.lat},${location.long}`;\n      const response = await fetch(`/api/weather`);\n      const data = await response.json();\n      console.log(data, typeof(data));\n      setWeatherData(data);\n    }\n    catch(error) {\n      console.log('Error fetching weather data!');\n    }\n  };\n\n  useEffect(() => {\n    getWeather();\n  }, []);\n\n\n  /* -- UTILS -- */\n\n  const stringSplitter = (stringToSplit) => {\n    const splittedString = stringToSplit.split('/');\n    const transformedString = splittedString.map((eachString) => eachString.split('_').join(' '));\n    return transformedString.join(', ');\n  };\n\n  const getShortMonthName = new Intl.DateTimeFormat(\"en-US\", { month: \"short\" }).format;\n\n  return (\n    <div className=\"container\">\n      <div className=\"container-top\">\n        <div className=\"date\">{getShortMonthName(new Date())} {new Date().getDate()}</div>\n        <div className=\"weather-icon-container\">\n          <div className=\"weather-icon\">\n            <Icon name='weather'/>\n            <Icon name='weather'/>\n          </div>\n        </div>\n        \n        <div className=\"info\">\n          <div className=\"temperature\">{Math.round(weatherData.currently.temperature)}&#176;</div>\n          <div className=\"summary\">\n            <div className=\"summary__text\">{weatherData.currently.summary}</div>\n            <div className=\"summary__place\">{stringSplitter(weatherData.timezone)}</div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"container-bottom\">\n        <div title=\"wind speed\" className=\"container-bottom__info\">\n          <Icon name=\"wind-speed\"/>\n          <span className=\"container-bottom__info-text\">{Math.round(weatherData.currently.windSpeed)}kmh</span>\n        </div>\n        <div title=\"humidity\" className=\"container-bottom__info\">\n          <Icon name=\"humidity\"/>\n          <span className=\"container-bottom__info-text\">{Math.round(weatherData.currently.humidity * 100)}%</span>\n        </div>\n        <div title=\"cloudy\" className=\"container-bottom__info\">\n          <Icon name=\"cloudy\"/>\n          <span className=\"container-bottom__info-text\">{Math.round(weatherData.currently.cloudCover * 100)}%</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}